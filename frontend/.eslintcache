[{"/Users/tianjianxu/Documents/GitHub/covid19-forecast-bench/frontend/src/index.js":"1","/Users/tianjianxu/Documents/GitHub/covid19-forecast-bench/frontend/src/reportWebVitals.js":"2","/Users/tianjianxu/Documents/GitHub/covid19-forecast-bench/frontend/src/evaluation/evaluation.js":"3","/Users/tianjianxu/Documents/GitHub/covid19-forecast-bench/frontend/src/homepage/homepage.js":"4","/Users/tianjianxu/Documents/GitHub/covid19-forecast-bench/frontend/src/navbar/navbar.js":"5","/Users/tianjianxu/Documents/GitHub/covid19-forecast-bench/frontend/src/aboutus/aboutus.js":"6","/Users/tianjianxu/Documents/GitHub/covid19-forecast-bench/frontend/src/evaluation/evalgraph.js":"7","/Users/tianjianxu/Documents/GitHub/covid19-forecast-bench/frontend/src/forecastbench.js":"8"},{"size":530,"mtime":1606801880629,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1606788512772,"results":"11","hashOfConfig":"10"},{"size":14166,"mtime":1606801823252,"results":"12","hashOfConfig":"10"},{"size":305,"mtime":1606801802819,"results":"13","hashOfConfig":"10"},{"size":1165,"mtime":1606790117974,"results":"14","hashOfConfig":"10"},{"size":5940,"mtime":1606801829759,"results":"15","hashOfConfig":"10"},{"size":3948,"mtime":1606789425809,"results":"16","hashOfConfig":"10"},{"size":1853,"mtime":1606801728584,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sont2m",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tianjianxu/Documents/GitHub/covid19-forecast-bench/frontend/src/index.js",[],"/Users/tianjianxu/Documents/GitHub/covid19-forecast-bench/frontend/src/reportWebVitals.js",[],["38","39"],"/Users/tianjianxu/Documents/GitHub/covid19-forecast-bench/frontend/src/evaluation/evaluation.js",["40","41","42","43"],"/Users/tianjianxu/Documents/GitHub/covid19-forecast-bench/frontend/src/homepage/homepage.js",[],"/Users/tianjianxu/Documents/GitHub/covid19-forecast-bench/frontend/src/navbar/navbar.js",["44","45","46","47","48","49"],"import React, { Component } from \"react\";\n\nimport {\n    Menu,\n    Row,\n    Col\n} from 'antd';\nimport styles from \"./navbar.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap'\n\n\n// class NavBar extends Component {\nconst NavBar = () => {\n    return (\n        <Navbar collapseOnSelect expand=\"lg\" className=\"navbar-header navbar-light\">\n          <Navbar.Brand href=\"#/\"><img\n                    className=\"logo\"\n                    src=\"https://identity.usc.edu/files/2011/12/combo_gold_white_cardinal.png\"\n                    alt=\"USC\"\n                /></Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link className=\"navbar-link\" href=\"#/\">Home</Nav.Link>\n              <Nav.Link className=\"navbar-link\" href=\"#evaluation\">Evaluation</Nav.Link>\n              <Nav.Link className=\"navbar-link\" href=\"#about\">About Us</Nav.Link>\n            </Nav>\n            <Nav>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n    )\n}\nexport default NavBar;","/Users/tianjianxu/Documents/GitHub/covid19-forecast-bench/frontend/src/aboutus/aboutus.js",["50","51","52","53","54","55","56","57"],"/Users/tianjianxu/Documents/GitHub/covid19-forecast-bench/frontend/src/evaluation/evalgraph.js",["58","59"],"import React, { Component } from \"react\";\nimport {\n    red,\n    gold,\n    lime,\n    cyan,\n    geekblue,\n    purple,\n    magenta\n  } from \"@ant-design/colors\";\n\nimport {\n    LineChart,\n    Line,\n    CartesianGrid,\n    XAxis,\n    YAxis,\n    Tooltip,\n    Legend,\n    Label,\n    ErrorBar,\n    ReferenceLine\n} from 'recharts';\n\nfunction getLineColor(index) {\n    const colors = [\n        red,\n        gold,\n        lime,\n        cyan,\n        geekblue,\n        purple,\n        magenta\n    ];\n\n    return colors[index % colors.length];\n}\n\n\n\nclass EvalGraph extends Component {\n    parseData = (data, errorType) => {\n        const firstModel = Object.keys(data)[0];\n        if (data[firstModel])\n        {\n            if (errorType === \"rmse\")\n            {\n                const chartData = data[firstModel].rmseData.map((value,idx) => {\n                    let date = value.x.split(\"_\")[0].substring(5)+ \"_\" + value.x.split(\"_\")[1].substring(5);\n                    let dataSet = {name: date};\n                    if (!isNaN(value.y) && value.y !== \"\")\n                    {\n                      dataSet[Object.keys(data)[0]] = value.y;\n                    }\n                    for (let i = 1; i < Object.keys(data).length; ++i)\n                    {\n                        let error = data[Object.keys(data)[i]].rmseData[idx].y;\n                        if (!isNaN(error) && error !== \"\")\n                        {\n                          dataSet[Object.keys(data)[i]] = error;\n                        }\n                    }\n                    return dataSet\n                });\n                return chartData;\n            }\n            else\n            {\n              const chartData = data[firstModel].maeData.map((value,idx) => {\n                let date = value.x.split(\"_\")[0].substring(5)+ \"_\" + value.x.split(\"_\")[1].substring(5)\n                let dataSet = {name: date};\n                if (!isNaN(value.y) && value.y !== \"\")\n                    {\n                      dataSet[Object.keys(data)[0]] = value.y;\n                    }\n                    for (let i = 1; i < Object.keys(data).length; ++i)\n                    {\n                        let error = data[Object.keys(data)[i]].maeData[idx].y;\n                        if (!isNaN(error) && error !== \"\")\n                        {\n                          dataSet[Object.keys(data)[i]] = error;\n                        }\n                    }\n                    return dataSet\n              });\n              return chartData;\n            }\n        }\n    }\n\n    render(){\n        let {data, errorType} = this.props;\n        //map data\n        const chartData = this.parseData(data, errorType);\n        console.log(data)\n        console.log(chartData);\n        //areas and line color\n        const models = Object.keys(data);\n        let colors = [];\n        models.map((model, idx)=>{\n            let strokeColor = getLineColor(idx);\n            colors.push(strokeColor);\n            return 0;\n        });\n        let lines = [];\n        for (let i = 0; i < models.length; ++i)\n        {\n            lines.push(\n                <Line type=\"monotone\" key={i} dataKey={models[i]} stroke={colors[i][3]} strokeWidth={5}/>\n            )\n        }\n        return(\n            <LineChart width={1400} height={300} data={chartData}\n            margin={{ top: 40, right: 30, left: 40, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis>\n                {errorType===\"rmse\"?\n                <Label value=\"Root Mean Square Error\" dy = {90} position=\"insideLeft\" angle={-90} fontSize={15} />\n                 :\n                <Label value=\"Mean Absolute Error\" dy = {45} position=\"insideLeft\" angle={-90} fontSize={15} />\n                }\n            </YAxis>\n            <Tooltip />\n            <Legend iconSize={40}/>\n            {lines}\n            </LineChart>\n        );\n    }\n}\n\nexport default EvalGraph;\n",["60","61"],"/Users/tianjianxu/Documents/GitHub/covid19-forecast-bench/frontend/src/forecastbench.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":14,"column":5,"nodeType":"68","messageId":"69","endLine":14,"endColumn":9},{"ruleId":"66","severity":1,"message":"70","line":15,"column":5,"nodeType":"68","messageId":"69","endLine":15,"endColumn":11},{"ruleId":"66","severity":1,"message":"71","line":307,"column":13,"nodeType":"68","messageId":"69","endLine":307,"endColumn":24},{"ruleId":"66","severity":1,"message":"72","line":308,"column":13,"nodeType":"68","messageId":"69","endLine":308,"endColumn":23},{"ruleId":"66","severity":1,"message":"73","line":1,"column":17,"nodeType":"68","messageId":"69","endLine":1,"endColumn":26},{"ruleId":"66","severity":1,"message":"74","line":4,"column":5,"nodeType":"68","messageId":"69","endLine":4,"endColumn":9},{"ruleId":"66","severity":1,"message":"75","line":5,"column":5,"nodeType":"68","messageId":"69","endLine":5,"endColumn":8},{"ruleId":"66","severity":1,"message":"76","line":6,"column":5,"nodeType":"68","messageId":"69","endLine":6,"endColumn":8},{"ruleId":"66","severity":1,"message":"77","line":8,"column":8,"nodeType":"68","messageId":"69","endLine":8,"endColumn":14},{"ruleId":"66","severity":1,"message":"78","line":10,"column":23,"nodeType":"68","messageId":"69","endLine":10,"endColumn":34},{"ruleId":"79","severity":1,"message":"80","line":20,"column":170,"nodeType":"81","endLine":20,"endColumn":185},{"ruleId":"79","severity":1,"message":"80","line":29,"column":110,"nodeType":"81","endLine":29,"endColumn":125},{"ruleId":"79","severity":1,"message":"80","line":32,"column":187,"nodeType":"81","endLine":32,"endColumn":202},{"ruleId":"79","severity":1,"message":"80","line":44,"column":99,"nodeType":"81","endLine":44,"endColumn":114},{"ruleId":"79","severity":1,"message":"80","line":48,"column":99,"nodeType":"81","endLine":48,"endColumn":114},{"ruleId":"79","severity":1,"message":"80","line":52,"column":99,"nodeType":"81","endLine":52,"endColumn":114},{"ruleId":"79","severity":1,"message":"80","line":59,"column":106,"nodeType":"81","endLine":59,"endColumn":121},{"ruleId":"79","severity":1,"message":"80","line":67,"column":148,"nodeType":"81","endLine":67,"endColumn":163},{"ruleId":"66","severity":1,"message":"82","line":21,"column":5,"nodeType":"68","messageId":"69","endLine":21,"endColumn":13},{"ruleId":"66","severity":1,"message":"83","line":22,"column":5,"nodeType":"68","messageId":"69","endLine":22,"endColumn":18},{"ruleId":"62","replacedBy":"84"},{"ruleId":"64","replacedBy":"85"},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'List' is defined but never used.","Identifier","unusedVar","'Avatar' is defined but never used.","'rmseSummary' is assigned a value but never used.","'maeSummary' is assigned a value but never used.","'Component' is defined but never used.","'Menu' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'styles' is defined but never used.","'NavDropdown' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'ErrorBar' is defined but never used.","'ReferenceLine' is defined but never used.",["86"],["87"],"no-global-assign","no-unsafe-negation"]